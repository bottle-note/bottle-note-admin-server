name: Auto Label Issues with GPT

on:
  issues:
    types: [opened,edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      
    steps:
    # Step 1: 라벨 목록 가져오기
    - name: Get Available Labels
      id: get_labels
      uses: actions/github-script@v7
      with:
        script: |
          const labels = await github.rest.issues.listLabelsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const labelNames = labels.data.map(label => label.name);
          console.log('Available labels:', labelNames);
          core.setOutput('labels', labelNames.join(', '));
          return labelNames;
    
    # Step 2: 이슈 정보 가져오기
    - name: Get Issue Info
      id: get_issue
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          console.log('Issue:', issue.title);
          core.setOutput('title', issue.title);
          core.setOutput('body', issue.body || '');
          core.setOutput('number', issue.number.toString());
    
    # Step 3: OpenAI로 라벨 선택
    - name: Call OpenAI
      id: openai
      uses: Just-Moh-it/openai@v0.0.1
      with:
        openai-api-key: ${{ secrets.OPENAI_API_KEY }}
        openai-mode: "chat"
        openai-params: |
          {
            "model": "gpt-3.5-turbo",
            "messages": [
              {
                "role": "system",
                "content": "You select GitHub issue labels. Return ONLY a JSON array of label names."
              },
              {
                "role": "user",
                "content": "Labels: ${{ steps.get_labels.outputs.labels }}\n\nTitle: ${{ steps.get_issue.outputs.title }}\n\nBody: ${{ steps.get_issue.outputs.body }}\n\nReturn JSON array only."
              }
            ]
          }
    
    # Step 4: 라벨 적용
    - name: Apply Labels
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const response = '${{ steps.openai.outputs.completion }}';
            const labels = JSON.parse(response);
            
            if (labels && labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.get_issue.outputs.number }},
                labels: labels
              });
              console.log('Applied:', labels);
            }
          } catch (e) {
            console.error('Failed:', e);
          }
